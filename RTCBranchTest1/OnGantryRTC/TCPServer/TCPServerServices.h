///////////////////////////////////////////////////////////////////////////////
// TCPServerServices.h

#pragma once

#include "TcServices.h"

const ULONG DrvID_TCPServer = 0x3F000000;
#define SRVNAME_TCPSERVER "TCPServer"

///<AutoGeneratedContent id="ClassIDs">
const CTCID CID_TCPServerCTCPServer = {0x0ac9c3bc,0x178d,0x48ce,{0x87,0x6a,0x10,0xa6,0xe1,0x76,0xca,0x72}};
///</AutoGeneratedContent>

///<AutoGeneratedContent id="ParameterIDs">
const PTCID PID_TCPServerParameter = 0x00000001;
const PTCID PID_TCPServerTcpServerPort = 0x00000002;
const PTCID PID_TCPServerTcpProt = 0x00000003;
///</AutoGeneratedContent>

///<AutoGeneratedContent id="DataTypes">
#if !defined(_TC_TYPE_7CECC506_F55F_4594_B611_972D650865D2_INCLUDED_)
#define _TC_TYPE_7CECC506_F55F_4594_B611_972D650865D2_INCLUDED_
enum TCPIP_EVENT : ULONG {
	TCPIP_EVENT_NONE = 0,
	TCPIP_EVENT_ERROR = 1,
	TCPIP_EVENT_RESET = 2,
	TCPIP_EVENT_TIMEOUT = 3,
	TCPIP_EVENT_CONN_ESTABLISHED = 4,
	TCPIP_EVENT_CONN_INCOMING = 5,
	TCPIP_EVENT_CONN_CLOSED = 6,
	TCPIP_EVENT_CONN_IDLE = 7,
	TCPIP_EVENT_DATA_RECEIVED = 8,
	TCPIP_EVENT_DATA_SENT = 9,
	TCPIP_EVENT_KEEP_ALIVE = 10,
	TCPIP_EVENT_LINKCONNECT = 11,
	TCPIP_EVENT_LINKDISCONNECT = 12
};
#endif // !defined(_TC_TYPE_7CECC506_F55F_4594_B611_972D650865D2_INCLUDED_)

#if !defined(_TC_TYPE_279BA649_3F0E_4573_80C5_EFD161426949_INCLUDED_)
#define _TC_TYPE_279BA649_3F0E_4573_80C5_EFD161426949_INCLUDED_
#pragma pack(push,1)
typedef struct _ST_STRUCT_GANTRY_EXPOSE_LIST
{
	float GantryPosition;
	float GantrySpeed;
	BYTE Hour;
	BYTE Minite;
	BYTE Second;
	USHORT MilliSecond;
	BYTE CollimatorType;
	BYTE PanelType;
	float Panel_Position;
	ULONG OpenSourceTimer;
} ST_STRUCT_GANTRY_EXPOSE_LIST, *PST_STRUCT_GANTRY_EXPOSE_LIST;
#pragma pack(pop)
#endif // !defined(_TC_TYPE_279BA649_3F0E_4573_80C5_EFD161426949_INCLUDED_)

typedef struct _TCPServerParameter
{
	ULONG data1;
	ULONG data2;
	double data3;
} TCPServerParameter, *PTCPServerParameter;

#pragma pack(push,1)
typedef struct _TCPServerInputsModulator
{
	USHORT mod_state_set_read;
	float mod_filament_vol_set_read;
	float mod_dc_voltage_set_read;
	float mod_pulse_width_set_read;
	USHORT mod_state_read;
	USHORT mod_level;
	float mod_filament_vol_read;
	float mod_filament_current_read;
	float mod_dc_vol_read;
	float mod_pulse_width_read;
	float mod_average_power_read;
	float mod_prf_read;
	ULONG mod_remaining_time;
	ULONG mod_off_hour;
	ULONG mod_standby_hour;
	ULONG mod_hv_hour;
	ULONG mod_trig_hour;
	USHORT mod_app_ver;
	USHORT mod_fpga_ver;
	ULONG mod_standby_interlock;
	ULONG mod_hv_interlock;
	ULONG mod_trig_interlock;
} TCPServerInputsModulator, *PTCPServerInputsModulator;
#pragma pack(pop)

#pragma pack(push,1)
typedef struct _TCPServerOutputsModulator
{
	USHORT mod_state;
	float mod_filament_vol;
	float mod_dc_voltage;
	float mod_pluse_width;
} TCPServerOutputsModulator, *PTCPServerOutputsModulator;
#pragma pack(pop)

#pragma pack(push,1)
typedef struct _TCPServerInputsGun
{
	float gun_fila_vol_read;
	float gun_fila_current_read;
	float gun_cathode_current_read;
	float gun_hv_read;
	USHORT GunRemainingTime;
} TCPServerInputsGun, *PTCPServerInputsGun;
#pragma pack(pop)

typedef struct _TCPServerOutputsGun
{
	float gun_hv;
	float gun_warmup;
	ULONG gun_warmup_time;
	float gun_fila_current_set_tol;
	float gun_fila_vol_min;
	float gun_fila_vol_max;
	float gun_cathode_current_min;
	float gun_cathode_current_max;
	float gun_heaterok_judgetime;
	float gun_dr_at_fullpower;
	float gun_rundown_prf_k;
	float gun_rundown_dr_k;
	float gun_hv_rat_1;
	float gun_hv_rat_2;
	float gun_hv_rat_3;
	float gun_hv_rat_4;
	float gun_fila_vol_set_rat_1;
	float gun_fila_vol_set_rat_2;
	float gun_fila_vol_set_rat_3;
	float gun_fila_vol_set_rat_4;
	float gun_fila_vol_rat_1;
	float gun_fila_vol_rat_2;
	float gun_fila_vol_rat_3;
	float gun_fila_vol_rat_4;
	float gun_fila_current_rat_1;
	float gun_fila_current_rat_2;
	float gun_fila_current_rat_3;
	float gun_fila_current_rat_4;
	float gun_cathode_current_rat_1;
	float gun_cathode_current_rat_2;
	float gun_cathode_current_rat_3;
	float gun_cathode_current_rat_4;
	float gun_hv_read_rat1;
	float gun_hv_read_rat2;
	float gun_hv_read_rat3;
	float gun_hv_read_rat4;
} TCPServerOutputsGun, *PTCPServerOutputsGun;

#pragma pack(push,1)
typedef struct _TCPServerInputsWater
{
	ULONG water_flow_switch;
	float water_temp_1;
	float water_temp_2;
	float water_temp_3;
	float water_temp_4;
	float water_temp_5;
	float water_flow_in;
	float water_pressure;
	float water_temp_in;
	float water_temp_back;
	float water_flow_low_set;
	float water_temp_high_set;
	float water_temp_low_set;
	USHORT water_interlock_raw;
} TCPServerInputsWater, *PTCPServerInputsWater;
#pragma pack(pop)

#pragma pack(push,1)
typedef struct _TCPServerOutputsWater
{
} TCPServerOutputsWater, *PTCPServerOutputsWater;
#pragma pack(pop)

typedef struct _TCPServerInputsDose
{
	USHORT DoseInformation1;
	USHORT DoseInformation2;
	bool LowDoseRateInterlock;
	bool HighDoseRateInterlock;
} TCPServerInputsDose, *PTCPServerInputsDose;

#pragma pack(push,1)
typedef struct _TCPServerOutputsDose
{
	USHORT DoseRateCycleTime;
	USHORT DoseRateAccTime;
	USHORT DoseCalFactorA1;
	USHORT DoseCalFactorB1;
	USHORT DoseCalFactorA2;
	USHORT DoseCalFactorB2;
	USHORT DarkCurrentLimit;
	USHORT DummyDoseRateSet;
	USHORT DoseInterlockEnable;
	ULONG SymmetryThreshold1;
	ULONG SymmetryThreshold2;
	float SymmetryTolerance1;
	float SymmetryTolerance2;
	float DualChannelRatio;
	float DualChannelTolerance;
	float SegmentOverrangeRatio;
	float DoseRateLimit;
} TCPServerOutputsDose, *PTCPServerOutputsDose;
#pragma pack(pop)

typedef struct _TCPServerInputsAfc
{
	ULONG afc_mode;
	float afc_current_pos;
	float afc_RF_AI;
} TCPServerInputsAfc, *PTCPServerInputsAfc;

#pragma pack(push,1)
typedef struct _TCPServerOutputsAfc
{
	unsigned char afc_manual_dir;
	unsigned char afc_manual_move;
	ULONG afc_motor_max_speed;
	float afc_linear_low;
	float afc_linear_high;
	float afc_preset;
	ULONG afc_dir_swap;
	ULONG afc_mode_set;
	float afc_RF_set;
} TCPServerOutputsAfc, *PTCPServerOutputsAfc;
#pragma pack(pop)

typedef struct _TCPServerInputsBeam
{
	float beam_total_read1;
	float beam_total_read2;
	ULONG beam_dose_rate_read1;
	ULONG beam_dose_rate_read2;
	ULONG beam_time_read;
	float DoseDelta;
} TCPServerInputsBeam, *PTCPServerInputsBeam;

typedef struct _TCPServerOutputsBeam
{
	float beam_total_set1;
	float beam_total_set2;
	ULONG beam_dose_rate_set;
	ULONG beam_time_set;
} TCPServerOutputsBeam, *PTCPServerOutputsBeam;

#pragma pack(push,1)
typedef struct _TCPServerInputsVac
{
	float vac_voltage;
	float vac_current;
	unsigned char vac_ok;
} TCPServerInputsVac, *PTCPServerInputsVac;
#pragma pack(pop)

#pragma pack(push,1)
typedef struct _TCPServerOutputsVac
{
} TCPServerOutputsVac, *PTCPServerOutputsVac;
#pragma pack(pop)

#pragma pack(push,1)
typedef struct _TCPServerInputsSF6
{
	float sf6_pressure;
	unsigned char sf6_low;
	unsigned char sf6_high;
} TCPServerInputsSF6, *PTCPServerInputsSF6;
#pragma pack(pop)

#pragma pack(push,1)
typedef struct _TCPServerOutputsSF6
{
} TCPServerOutputsSF6, *PTCPServerOutputsSF6;
#pragma pack(pop)

#pragma pack(push,1)
typedef struct _TCPServerInputsPrf
{
} TCPServerInputsPrf, *PTCPServerInputsPrf;
#pragma pack(pop)

#pragma pack(push,1)
typedef struct _TCPServerOutputsPrf
{
	float prf_set;
	float PrfRatio;
	float PrfDeltaRatio;
	USHORT PrfCatchCycle;
	float DPP;
	float DoseDeltaActionRange;
	float PrfCatchCurveD1;
	float PrfCatchCurveR1;
	float PrfCatchCurveD2;
	float PrfCatchCurveR2;
	float PrfCatchCurveP1;
	float PrfCatchCurveQ1;
	float PrfCatchCurveP2;
	float PrfCatchCurveQ2;
} TCPServerOutputsPrf, *PTCPServerOutputsPrf;
#pragma pack(pop)

#pragma pack(push,1)
typedef struct _TCPServerInputsFsm
{
	BYTE CurrentState;
	BYTE RequiredState;
	BYTE LastState;
	struct {
		ULONG BgmInterlock1;
		ULONG BgmInterlock2;
		ULONG IgsInterlock;
		ULONG BsmInterlock1;
		ULONG BsmInterlock2;
		USHORT NgrInterlock;
	} Interlocks;
	struct {
		BYTE NGRUnready;
		BYTE BgmUnready;
		BYTE BsmUnready;
		BYTE IgsUnready;
	} Unreadys;
	ULONG Terminates;
	USHORT RadiationIndex;
} TCPServerInputsFsm, *PTCPServerInputsFsm;
#pragma pack(pop)

#pragma pack(push,1)
typedef struct _TCPServerOutputsFsm
{
	bool ComStateGUI;
	unsigned char GuiCmd1;
	unsigned char GuiCmd2;
	unsigned char GuiCmd3;
	unsigned char GuiCmd4;
	unsigned char GuiCmd5;
	unsigned char GuiCmd6;
	unsigned char GuiCmd7;
	unsigned char GuiCmd8;
	bool reset_command;
	struct {
		bool ModulatorCrcOk;
		bool GunCrcOk;
		bool AfcCrcOk;
		bool AfcCtrlCrcOk;
		bool DoseCrcOk;
		bool PrfCrcOk;
		bool EmulatorCrcOk;
		bool BsmCrcOk;
		bool IgsCrcOk;
	} ParaCrcStatus;
	struct {
		ULONG ModulatorCrc;
		ULONG GunCrc;
		ULONG AfcCrc;
		ULONG AfcCtrlCrc;
		ULONG DoseCrc;
		ULONG PrfCrc;
		ULONG EmulatorCrc;
		ULONG BsmCrc;
		ULONG IgsCrc;
	} ParameterCrcLocal;
	struct {
		ULONG ModulatorCrc;
		ULONG GunCrc;
		ULONG AfcCrc;
		ULONG AfcCtrlCrc;
		ULONG DoseCrc;
		ULONG PrfCrc;
		ULONG EmulatorCrc;
		ULONG BsmCrc;
		ULONG IgsCrc;
	} ParameterCrcRemote;
} TCPServerOutputsFsm, *PTCPServerOutputsFsm;
#pragma pack(pop)

#pragma pack(push,1)
typedef struct _TCPServerPlanInputs
{
	bool PlanReady;
} TCPServerPlanInputs, *PTCPServerPlanInputs;
#pragma pack(pop)

#pragma pack(push,1)
typedef struct _TCPServerPlanOutputs
{
	struct {
		BYTE BeamType;
		BYTE RadiationType;
		USHORT BeamNumber;
		USHORT TotalCP;
		float DoseRateSet;
		float Dose;
		float GantryAngleTolerance;
		float BeamLimitingAngleTolerance;
		float AsymxPositionTolerance;
		float AsymyPositionTolerance;
		float MlcPositionTolerance;
		float TableTopVerPositionTolerance;
		float TableTopLonPositionTolerance;
		float TableTopLatPositionTolerance;
	} BeamPlan;
	float BeamEnergyPlan[360];
	float DoseWeight[360];
	float MlcPos[360][128];
	float MlcAngle[360];
	float GantryAngle[360];
	float PssAngle[360];
	float TableVerPos[360];
	float TableLonPos[360];
	float TableLatPos[360];
	float TablePitchAngle[360];
	float TableRollAngle[360];
	BYTE MlcDir[360];
	BYTE GantryDir[360];
	BYTE PssDir[360];
	BYTE TablePitchDir[360];
	BYTE TableRollDir[360];
	bool RecvedCP[360];
	bool PlanReset;
} TCPServerPlanOutputs, *PTCPServerPlanOutputs;
#pragma pack(pop)

#pragma pack(push,1)
typedef struct _TCPServerInputsHalState
{
	struct {
		USHORT OnGantryRTC;
		USHORT BGM;
		USHORT RGS;
		USHORT BSM;
		USHORT IGS;
	} EthercatState;
	struct {
		bool OnGantryRTC;
		bool BGM;
		bool RGS;
		bool BSM;
		bool IGS;
	} EmulateState;
	struct {
		bool RgsCtrl;
		bool BsmCtrl;
		bool IgsCtrl;
	} ControllerEmuMode;
	BYTE WatchDogState;
} TCPServerInputsHalState, *PTCPServerInputsHalState;
#pragma pack(pop)

#pragma pack(push,1)
typedef struct _TCPServerOutputsHalState
{
	bool OnGantryRtcEmulate;
	bool BgmEmulate;
	bool RgsEmulate;
	bool BsmEmulate;
	SHORT IgsEmulate;
	struct {
		bool RgsCtrl;
		bool BsmCtrl;
		bool IgsCtrl;
	} ControllerEmuSet;
} TCPServerOutputsHalState, *PTCPServerOutputsHalState;
#pragma pack(pop)

#pragma pack(push,1)
typedef struct _TCPServerInputsBsm
{
	float bsm_Head_p1;
	float bsm_Head_p2;
	float bsm_jaw1_p1;
	float bsm_jaw1_p2;
	float bsm_jaw2_p1;
	float bsm_jaw2_p2;
	float MLCActPos[128];
	USHORT BSMStatus;
	float HeadSpeed;
	BYTE CollimatorPosition;
	ULONG InitResult0;
	ULONG InitResult1;
	ULONG InitResult2;
	ULONG InitResult3;
	float LeafMaxSpeed;
	float JawMaxSpeed;
} TCPServerInputsBsm, *PTCPServerInputsBsm;
#pragma pack(pop)

#pragma pack(push,1)
typedef struct _TCPServerOutputsBsm
{
	float bsm_Head_speed;
	float bsm_up_jaw2_speed;
	float bsm_up_jaw1_speed;
	unsigned char bsm_ok;
	USHORT BSMEnable;
	float CalibrationJaw[16];
	BYTE BSMInitMode;
	float HeadAngle;
	float HeadAngleOffset;
	float HeadAngleK;
	BYTE CollimatorPosition;
	float HeadAngleSecondaryK;
	ULONG HeadLimitEncoder;
} TCPServerOutputsBsm, *PTCPServerOutputsBsm;
#pragma pack(pop)

#pragma pack(push,1)
typedef struct _TCPServerInputsVMAT
{
} TCPServerInputsVMAT, *PTCPServerInputsVMAT;
#pragma pack(pop)

typedef struct _TCPServerOutputsVMAT
{
	float GantryMaxSpeed;
	float GantryMinSpeed;
	float MlcMaxSpeed;
	float MlcMinSpeed;
	float HeadMaxSpeed;
	float HeadMinSpeed;
	float PssMaxSpeed1;
	float PssMaxSpeed2;
	float PssMaxSpeed3;
	float PssMaxSpeed4;
	float PssMaxSpeed5;
	float PssMaxSpeed6;
	float PssMinSpeed1;
	float PssMinSpeed2;
	float PssMinSpeed3;
	float PssMinSpeed4;
	float PssMinSpeed5;
	float PssMinSpeed6;
	float DoseMaxSpeed;
	float DoseMinSpeed;
} TCPServerOutputsVMAT, *PTCPServerOutputsVMAT;

#pragma pack(push,1)
typedef struct _TCPServerInputsIgs
{
	bool MvPosReady;
	bool KvPosReady;
	bool CollimatorPosReady;
	USHORT KvPanelErrorcode;
	USHORT MVPanelErrorcode;
	SHORT CollimatorCross;
	SHORT CollimatorLong;
	SHORT CollimatorOffsetCross;
	SHORT CollimatorOffsetLong;
	LONG KVOffset1;
	LONG KVOffset2;
	LONG MVOffset1;
	LONG MVOffset2;
	ULONG IcuErrorCode;
	ULONG HighVoltageGeneratorErrorCode;
	float KvPosition;
	float MvPosition;
	BYTE IcuFocusExp;
	BYTE IcuFrequencyExp;
	BYTE IcuKVExp;
	USHORT IcuMAExp;
	USHORT IcuMSExp;
	USHORT ExposeListLong;
	ST_STRUCT_GANTRY_EXPOSE_LIST ExposeGantryList[30][20];
	USHORT ExposeListGroup;
	USHORT ExposeListNum;
	BYTE HVGeneratorHU;
} TCPServerInputsIgs, *PTCPServerInputsIgs;
#pragma pack(pop)

#pragma pack(push,1)
typedef struct _TCPServerOutputsIgs
{
	USHORT KVTimeOut;
	USHORT MVTimeOut;
	LONG KVOffset1;
	LONG KVOffset2;
	LONG MVOffset1;
	ULONG MVOffset2;
	float KvWorkPosH;
	float KvWorkPosF;
	float MvWorkPosX;
	float MvWorkPosY;
	BYTE WorkMode;
	BYTE Protocal;
	BYTE IcuFocusExp;
	BYTE IcuFrequencyExp;
	BYTE IcuKVExp;
	USHORT IcuMAExp;
	USHORT IcuMSExp;
	SHORT CollimatorCross;
	SHORT CollimatorLong;
	SHORT CollimatorOffsetCross;
	SHORT CollimatorOffsetLong;
	BYTE SynchronousSequence;
	BYTE FullHalfShape;
	float KvTorlerance;
	float MvTorlerance;
} TCPServerOutputsIgs, *PTCPServerOutputsIgs;
#pragma pack(pop)

///</AutoGeneratedContent>



///<AutoGeneratedContent id="DataAreaIDs">
#define ADI_TCPServerInputsModulator 1
#define ADI_TCPServerOutputsModulator 2
#define ADI_TCPServerInputsGun 9
#define ADI_TCPServerOutputsGun 10
#define ADI_TCPServerInputsWater 11
#define ADI_TCPServerOutputsWater 12
#define ADI_TCPServerInputsDose 21
#define ADI_TCPServerOutputsDose 22
#define ADI_TCPServerInputsAfc 13
#define ADI_TCPServerOutputsAfc 14
#define ADI_TCPServerInputsBeam 15
#define ADI_TCPServerOutputsBeam 16
#define ADI_TCPServerInputsVac 17
#define ADI_TCPServerOutputsVac 18
#define ADI_TCPServerInputsSF6 19
#define ADI_TCPServerOutputsSF6 20
#define ADI_TCPServerInputsPrf 23
#define ADI_TCPServerOutputsPrf 24
#define ADI_TCPServerInputsFsm 5
#define ADI_TCPServerOutputsFsm 6
#define ADI_TCPServerPlanInputs 7
#define ADI_TCPServerPlanOutputs 8
#define ADI_TCPServerInputsHalState 25
#define ADI_TCPServerOutputsHalState 26
#define ADI_TCPServerInputsBsm 27
#define ADI_TCPServerOutputsBsm 28
#define ADI_TCPServerInputsVMAT 29
#define ADI_TCPServerOutputsVMAT 30
#define ADI_TCPServerInputsIgs 31
#define ADI_TCPServerOutputsIgs 32
///</AutoGeneratedContent>

///<AutoGeneratedContent id="InterfaceIDs">
#if !defined(_TC_IID_03010099_0000_0000_E000_000000000064_INCLUDED_)
#define _TC_IID_03010099_0000_0000_E000_000000000064_INCLUDED_
TCOM_DECL_INTERFACE("03010099-0000-0000-e000-000000000064", ITcIoTcpProtocolRecv)
#endif // !defined(_TC_IID_03010099_0000_0000_E000_000000000064_INCLUDED_)

#if !defined(_TC_IID_03010098_0000_0000_E000_000000000064_INCLUDED_)
#define _TC_IID_03010098_0000_0000_E000_000000000064_INCLUDED_
TCOM_DECL_INTERFACE("03010098-0000-0000-e000-000000000064", ITcIoTcpProtocol)
#endif // !defined(_TC_IID_03010098_0000_0000_E000_000000000064_INCLUDED_)

///</AutoGeneratedContent>
